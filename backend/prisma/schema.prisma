// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id       Int     @id @default(autoincrement())
  uid      String  @unique @default(uuid())
  email    String  @unique
  phone    String  @unique
  name     String?
  password String

  status                  String?   @default("PENDING")
  userWeight              Int?      @default(2)
  isMfaEnabled            Boolean?  @default(false)
  loginAttempts           Int?      @default(0)
  isPasswordValid         Boolean?  @default(false)
  isPasswordResetRequired Boolean?  @default(true)
  lastPasswordResetDate   DateTime? @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roleId   Int
  roleInfo Roles    @relation(fields: [roleId], references: [id])
  products Product[]
  promotions    Promotions[]

  @@map("users")
}

model Product {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  price       Float
  weight      Int // in gram
  quantity    Int
  isActive    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy Int 
  user      Users @relation(fields: [createdBy], references: [id])

  @@map("products")
}

model Promotions {
  id           Int    @id @default(autoincrement())
  title        String
  secondTitle  String
  minimumRange Int // in gram
  maximumRange Int // in gram

  discountAmount Int
  perWeight      Int // in gram
  description    String
  startDate      DateTime
  endDate        DateTime
  isActive    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy Int   @unique
  user      Users @relation(fields: [createdBy], references: [id])

  @@map("promotions")
}



model Roles {
  id      Int     @id @default(autoincrement())
  role    Role_names
  context String 
  Users   Users[]

  @@map("roles")
}


enum Role_names {  
  SUPER_ADMIN
  ADMIN
  MANAGER
  USER
  DEVELOPER
}